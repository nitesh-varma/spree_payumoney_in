module Spree
  class PayumoneyController < StoreController
    protect_from_forgery only: :index

    def index
      @surl = payumoney_confirm_url
      @furl = payumoney_cancel_url

      payment_method = Spree::PaymentMethod.find(params[:payment_method_id])

      @key = payment_method.preferred_secret_key
      @salt = payment_method.preferred_secret_salt
      @txnid = payment_method.txnid(current_order)
      @amount = current_order.total.to_s
      @email = current_order.email

      if(address = current_order.bill_address || current_order.ship_address)
        @phone = address.phone #udf2
        @firstname = address.firstname
        @lastname = address.lastname #udf1
        @city = address.city #udf3
      end

      @payment_method_id = payment_method.id #udf4
    end

    def confirm
      payment_method = Spree::PaymentMethod.find(payment_method_id)
      notification = PayuIndia::Notification.new(request.query_string, options = {:key => payment_method.preferred_secret_key, :salt => payment_method.preferred_secret_salt, :params => params})

      #
      Spree::LogEntry.create({
        source: payment_method,
        details: params.to_yaml
      })

      order = current_order || raise(ActiveRecord::RecordNotFound)

      if(address = order.bill_address || order.ship_address)
        firstname = address.firstname
      end

      if notification.acknowledge
        payment = order.payments.create!({
          source_type: 'Spree::Gateway::Payumoney', # could be something generated by system
          amount: order.total,
          payment_method: payment_method
        })
      else
        flash.alert = 'Malicious transaction detected. Order amount not matched.'
        redirect_to checkout_state_path(order.state)
      end

      #mark payment as paid/complete
      payment.complete

      order.next
      order.update_attributes({:state => "complete", :completed_at => Time.now})

      if order.complete?
        order.save!
        flash.notice = Spree.t(:order_processed_successfully)

        redirect_to order_path(order)
        return
      else
        redirect_to checkout_state_path(order.state)
        return
      end
    end

    def cancel
      payment_method = Spree::PaymentMethod.find(payment_method_id)
      #log some entry into table
      Spree::LogEntry.create({
        source: payment_method,
        details: params.to_yaml
      })

      flash[:notice] = "Don't want to use Payumoney? No problems."
      #redirect to payment path and ask user to complete checkout
      #with different payment method
      redirect_to checkout_state_path(current_order.state)
    end

    private
    def payment_method_id
      params[:udf4]
    end
  end
end
